{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Pseudocode",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#meta"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#bools"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#storage"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.pseudocode",
          "match": "\\/\\/.*"
        },
        {
          "name": "comment.line.number-sign.pseudocode",
          "match": "#.*"
        },
        {
          "name": "comment.block.pseudocode",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.generic.pseudocode",
          "match": "(?i)\\b(then|end|return)\\b"
        },
        {
          "name": "keyword.control.branching.pseudocode",
          "match": "(?i)\\b(if|else|switch|case|default)\\b"
        },
        {
          "name": "keyword.control.io.pseudocode",
          "match": "(?i)\\b(output|input|print)\\b"
        },
        {
          "name": "keyword.control.exception-handling.pseudocode",
          "match": "(?i)\\b(try|catch|throw)\\b"
        },
        {
          "name": "keyword.control.access-modifiers.pseudocode",
          "match": "(?i)\\b(const|public|private|static|protected|readonly|abstract)\\b"
        },
        {
          "name": "keyword.control.iteration.pseudocode",
          "match": "(?i)\\b(while|for|to|in|foreach|next|do|repeat|until|break|continue)\\b"
        },
        {
          "name": "keyword.control.class.pseudocode",
          "match": "(?i)\\b(class|inherits|extends|new)\\b"
        },
        {
          "name": "keyword.control.imports.pseudocode",
          "match": "(?i)\\b(import|export)\\b"
        },
        {
          "name": "keyword.operator.logical.pseudocode",
          "match": "(?i)\\b(and|or|not|!|&&|\\|\\||in)\\b"
        },
        {
          "name": "keyword.others.pseudocode",
          "match": "\\b(MOD|DIV)\\b"
        },
        {
          "name": "keyword.declaration.function.pseudocode",
          "match": "(?i)\\b(function|procedure|subroutine)\\b"
        },
        {
          "name": "keyword.declaration.class.pseudocode",
          "match": "(?i)\\bclass\\b"
        },
        {
          "name": "keyword.declaration.struct.pseudocode",
          "match": "(?i)\\bstruct\\b"
        },
        {
          "name": "meta.function-call.pseudocode",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)(?= *\\(.*?\\))",
          "captures": {
            "1": {
              "name": "entity.name.function.pseudocode"
            }
          }
        }
      ]
    },
    "meta": {
      "patterns": [
        {
          "name": "meta.function.pseudocode",
          "begin": "(?i)\\b(private |public | protected)?(static |abstract )?((function|procedure|subroutine)) ([a-zA-Z_][a-zA-Z0-9_]*)\\((.*?)\\) *(?:\\{)?",
          "end": "(?i)(?:\\}|(end (?:function|procedure|subroutine)))",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.pseudocode"
            },
            "2": {
              "name": "storage.modifier.pseudocode"
            },
            "3": {
              "name": "keyword.declaration.function.pseudocode"
            },
            "4": {
              "name": "storage.type.function.pseudocode"
            },
            "5": {
              "name": "entity.name.function.pseudocode"
            },
            "6": {
              "name": "meta.parameters.pseudocode"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.pseudocode"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#meta"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#entities"
            },
            {
              "include": "#storage"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#variables"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#bools"
            }
          ]
        },
        {
          "name": "meta.class.pseudocode",
          "begin": "(?i)\\b(private |public )?(abstract |static )*((class)) ([a-zA-Z_][a-zA-Z0-9_]*) *(?:(extends|inherits) *([a-zA-Z_][a-zA-Z0-9_]*))? *(?:\\{|(do))?",
          "end": "(?i)(?:\\}|(end class))",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.pseudocode"
            },
            "2": {
              "name": "storage.modifier.pseudocode"
            },
            "3": {
              "name": "keyword.declaration.class.pseudocode"
            },
            "4": {
              "name": "storage.type.class.pseudocode"
            },
            "5": {
              "name": "entity.name.type.class.pseudocode"
            },
            "6": {
              "name": "storage.modifier.pseudocode"
            },
            "7": {
              "name": "entity.other.inherited-class.pseudocode"
            },
            "8": {
              "name": "keyword.control.pseudocode"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.pseudocode"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#meta"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#entities"
            },
            {
              "include": "#storage"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#variables"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#bools"
            }
          ]
        },
        {
          "name": "meta.struct.pseudocode",
          "begin": "(?i)\\b(private |public |protected )?(static )*((struct)) ([a-zA-Z_][a-zA-Z0-9_]*) *(?:\\{|(do))?",
          "end": "(?i)(?:\\}|(end struct))",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.pseudocode"
            },
            "2": {
              "name": "storage.modifier.pseudocode"
            },
            "3": {
              "name": "keyword.declaration.struct.pseudocode"
            },
            "4": {
              "name": "storage.type.struct.pseudocode"
            },
            "5": {
              "name": "entity.name.type.struct.pseudocode"
            },
            "6": {
              "name": "storage.modifier.pseudocode"
            },
            "7": {
              "name": "keyword.control.pseudocode"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.pseudocode"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#meta"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#entities"
            },
            {
              "include": "#storage"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#variables"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#bools"
            }
          ]
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.type.function.pseudocode",
          "match": "(?i)\\b(function|procedure|subroutine)\\b"
        },
        {
          "name": "storage.type.class.pseudocode",
          "match": "(?i)\\bclass\\b"
        },
        {
          "name": "storage.type.struct.pseudocode",
          "match": "(?i)\\bstruct\\b"
        },
        {
          "name": "storage.modifier.pseudocode",
          "match": "(?i)\\b(extends|inherits)\\b"
        },
        {
          "name": "storage.modifier.pseudocode",
          "match": "(?i)\\babstract\\b"
        },
        {
          "name": "storage.modifier.pseudocode",
          "match": "(?i)\\bstatic\\b"
        },
        {
          "name": "storage.modifier.pseudocode",
          "match": "(?i)\\bpublic\\b"
        },
        {
          "name": "storage.modifier.pseudocode",
          "match": "(?i)\\bprivate\\b"
        },
        {
          "name": "storage.modifier.pseudocode",
          "match": "(?i)\\bprotected\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.pseudocode",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.pseudocode",
          "match": "\\\\."
        },
        {
          "name": "string.template.pseudocode",
          "begin": "(\\$\\{)((.*?))(?=\\})",
          "end": "(\\})",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.template-expression.begin.pseudocode"
            },
            "2": {
              "name": "meta.template.expression.pseudocode"
            },
            "3": {
              "name": "meta.embedded.line.pseudocode",
              "patterns": [
                { "include": "#meta" },
                { "include": "#entities" },
                { "include": "#storage" },
                { "include": "#variables" },
                { "include": "#strings" },
                { "include": "#numbers" },
                { "include": "#punctuation" }
              ]
            }
          },
          "endCaptures": {
            "1": {
              "name": "punctuation.definition.template-expression.end.pseudocode"
            }
          },
          "patterns": [
            { "include": "#meta" },
            { "include": "#entities" },
            { "include": "#storage" },
            { "include": "#variables" },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#punctuation" }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.pseudocode",
          "match": "\\b[0-9]+(?![0-9]*\\.)\\b"
        },
        {
          "name": "constant.numeric.float.pseudocode",
          "match": "\\b[0-9]+\\.[0-9]+\\b"
        }
      ]
    },
    "bools": {
      "patterns": [
        {
          "name": "constant.language.pesudocode",
          "match": "(?i)\\b(true|false|null)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.function.pseudocode",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?= *\\()\\b"
        },
        {
          "name": "variable.other.pseudocode",
          "match": "[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "variable.parameter.pseudocode",
          "match": "(?i)(?<=function [a-zA-Z0-9_]\\().*?(?=\\))"
        },
        {
          "name": "variable.parameter.pseudocode",
          "match": "(?i)(?<=procedure [a-zA-Z0-9_]\\().*?(?=\\))"
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "name": "entity.name.function.pseudocode",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?= *\\()\\b"
        },
        {
          "name": "entity.name.class.pseudocode",
          "match": "(?i)\\b(?<=class )[a-zA-Z_][a-zA-Z0-9_]*(?= *\\()\\b"
        },
        {
          "name": "entity.name.struct.pseudocode",
          "match": "(?i)\\b(?<=struct )[a-zA-Z_][a-zA-Z0-9_]*(?= *\\()\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.pseudocode",
          "match": ","
        },
        {
          "name": "punctuation.terminator.pseudocode",
          "match": ";"
        },
        {
          "name": "punctuation.accessor.pseudocode",
          "match": "\\."
        }
      ]
    }
  },
  "scopeName": "source.pseudo"
}
